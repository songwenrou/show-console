!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t),function(){if(console){var e={log:console.log};let r=document.querySelector("#slog");function t(e){return Object.prototype.toString.call(e).slice(8,-1)}function o(e){let o="";for(let t in e)o+=`<li>${n(e[t])}</li>`;t(e)}function n(n){for(let l in n)if(e.log(t(l)),"Array"==t(n[l]))o(n[l]);else if("Object"==t(n[l]));else{let e=document.createElement("LI"),o=document.createTextNode(t(n[l]));e.appendChild(o),r.appendChild(e)}}console.log=function(){n(arguments),e.log.apply(this,Array.prototype.slice.call(arguments,0))},console.error=function(){let t="<li>111"+JSON.stringify(Object.values(arguments))+"</li>";log.innerHTML=t,e.log(JSON.stringify(Object.values(arguments))),e.log.apply(this,Array.prototype.slice.call(arguments,0))},document.querySelector(".slog-item").addEventListener("click",(function(e){}))}console.log(111),console.log(222)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,